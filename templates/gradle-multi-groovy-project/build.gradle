buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
        classpath 'org.ajoberstar:gradle-git:1.3.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'build-dashboard'
    apply plugin: 'org.kordamp.gradle.stats'
    apply plugin: 'com.github.ben-manes.versions'
    apply from: "${rootProject.projectDir}/gradle/publishing.gradle"
    apply from: "${rootProject.projectDir}/gradle/code-coverage.gradle"
    apply from: "${rootProject.projectDir}/gradle/code-quality.gradle"

    repositories {
        mavenLocal()
        jcenter()
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    task sourcesJar(type: Jar) {
        group 'Build'
        description 'An archive of the source code'
        classifier 'sources'
        from sourceSets.main.allSource
    }

    jar.finalizedBy sourcesJar

    artifacts {
        sourcesJar
    }

    gradle.taskGraph.whenReady {
        def createIfNotExists = { File dir ->
            if (!dir.exists()) {
                dir.mkdirs()
            }
        }

        String sourceSetName = project.plugins.hasPlugin('groovy') ? 'groovy' : 'java'
        sourceSets.main[sourceSetName].srcDirs.each(createIfNotExists)
        sourceSets.test[sourceSetName].srcDirs.each(createIfNotExists)
        sourceSets.main.resources.srcDirs.each(createIfNotExists)
        sourceSets.test.resources.srcDirs.each(createIfNotExists)
    }
}

subprojects {
    dependencies {
        compile "org.codehaus.groovy:groovy-all:$groovyVersion"
        runtime("log4j:log4j:$log4jVersion") {
            exclude group: 'ant',         module: 'ant-nodeps'
            exclude group: 'ant',         module: 'ant-junit'
            exclude group: 'ant-contrib', module: 'ant-contrib'
        }
        runtime "org.slf4j:slf4j-log4j12:$slf4jVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        testCompile "org.spockframework:spock-core:$spockVersion"
    }
}